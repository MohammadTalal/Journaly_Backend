{"version":3,"sources":["App.js","shared/components/UIElements/Card.js","shared/components/UIElements/Backdrop.js","shared/components/UIElements/Modal.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/LoadingSpinner.js","shared/hooks/http-hook.js","shared/context/auth-form-context.js","posts/components/CommentsCard.js","posts/components/UserPostItem.js","posts/components/UserPostList.js","posts/pages/UserPosts.js","shared/components/Navbar/Header.js","shared/components/Navbar/NavLinks.js","shared/components/Navbar/SideDrawer.js","shared/components/Navbar/Navigation.js","posts/pages/NewPost.js","user/pages/AuthForms.js","shared/components/UIElements/UserImage.js","posts/components/PostHeader.js","posts/components/PostItem.js","posts/components/PostList.js","posts/pages/AllPosts.js","posts/pages/UpdatePost.js","admin/components/UsersCountChart.js","admin/components/PostsCountChart.js","admin/components/SingleStatus.js","admin/components/UserActive.js","admin/pages/Admin.js","Profile/component/Profile.js","Favourite/components/Favourites.js","index.js"],"names":["signoutTimer","Card","props","className","style","children","Backdrop","ReactDOM","createPortal","onClick","document","getElementById","ModalOverlay","content","headerClass","header","onSubmit","event","preventDefault","contentClass","footerClass","footer","Modal","Fragment","show","onCancel","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","ErrorModal","onClear","error","LoadingSpinner","asOverlay","useHttpClient","useState","isLoading","setIsLoading","setError","activeHttpRequests","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortCtrl","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","AuthContext","createContext","isSignedIn","userId","token","signIn","signOut","CommentsCard","comments","messagesEndRef","scrollIntoView","behavior","scrollToBottom","length","map","comment","index","ref","name","UserPostItem","auth","useContext","setComment","setComments","showConfirmModal","setShowConfirmModal","showCommentConfirmModal","setShowCommentConfirmModal","validationSchema","Yup","required","formik","useFormik","enableReinitialize","cancelDeleteHandler","confirmDeleteHandler","id","Authorization","RemoveFavouriteWhenPostDelete","onDelete","JSON","stringify","postId","RemoveFavourite","commentSubmitHandler","e","username","res","alert","fetchComment","Delete","marginTop","htmlFor","type","value","autoComplete","onChange","target","touched","errors","disabled","imageUrl","src","alt","title","moment","publishDate","format","postContent","display","to","UserPostList","searchTerm","setSearchTerm","pageNumber","setPageNumber","pagesVisited","displayPosts","items","slice","post","creatorId","creator","onDeletePost","delete","pageCount","Math","ceil","placeholder","val","toLowerCase","includes","previousLabel","nextLabel","onPageChange","selected","containerClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","UserPosts","loadedPosts","setLoadedPosts","useParams","fetchPosts","posts","history","useHistory","deletedPostId","prevPosts","Header","NavLinks","status","checkRole","role","localStorage","getItem","exact","SideDrawer","Navigation","drawerIsOpen","setDrawerIsOpen","userData","parse","closeDrawerHandler","NewPost","SetUserName","userimage","SetUserImage","fetchName","initialValues","image","values","formData","FormData","append","Date","handleSubmit","getFieldProps","rows","accept","setFieldValue","files","dirty","isValid","AuthForms","isSigninMode","setIsSigninMode","email","password","respnseData","setItem","removeItem","notRequired","min","textAlign","resetForm","UserImage","width","height","PostHeader","userInfo","userImage","places","PostItem","Disabled","setLikeDisabled","DisabledFavourite","setFavouriteDisabled","getlikes","setGetLikes","AddFavourite","disable","likePostHandler","fetchLikecheck","unlikePostHandler","responseData2","likeslength","countLikes","fetchFavouritecheck","console","log","postusername","justifyContent","fontSize","color","marginRight","PostList","setUsername","setUserImage","fetchUserName","userimageUrl","AllPosts","startDate","setStartDate","endDate","setEndDate","filteredPosts","setFilteredPosts","endDateFormat","startDateFormat","filterPostsByDate","axios","then","data","result","catch","err","dateFormat","placeholderText","maxDate","UpdatePost","journalId","loadedPost","setLoadedPost","fetchPost","UsersCountChart","users","setAllUsers","fetchAllUsers","today","mm","String","getMonth","padStart","yyyy","getFullYear","setDate","getDate","today_users","user","registerDate","substr","last1Day","last_1day_users","last2Days","last_2days_users","last3Days","last_3days_users","last4Days","last_4days_users","last5Days","last_5days_users","last6Days","last_6days_users","last7Days","last_7days_users","last8Days","last_8days_users","last9Days","last_9days_users","AllUsers","year","max","valueField","argumentField","text","PostsCounterChart","SingleStatus","ActiveHandle","userid","window","location","href","DeActiveHandle","border","padding","margin","UserActive","allusers","singleuser","setUser","showStatusModal","fetchAllusers","overflow","scope","marginLeft","Admin","toggle","setToggle","marginBottom","PostsCountChart","Profile","o_password","setOldPassword","n_password","setNewPassword","c_password","setConfirmPassword","ErrorPassword","setErrorPassword","setImage","showConfirmPasswordModal","setShowImageConfirmModal","showConfirmImageModal","setShowPasswordConfirmModal","changeUserImage","patch","reload","ConfirmPassword","old_password","verifyPassword","changeUserPassword","fetchUser","undefined","favourites","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","uid","expirationDate","getTime","expiration","toISOString","remaininTime","setTimeout","clearTimeout","storedData","path","Favourites","Provider","render"],"mappings":"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","file":"static/js/main.ce4c3775.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\n\nimport UserPosts from \"./posts/pages/UserPosts\";\nimport Navigation from \"./shared/components/Navbar/Navigation\";\nimport NewPost from \"./posts/pages/NewPost\";\nimport AuthForms from \"./user/pages/AuthForms\";\nimport { AuthContext } from \"./shared/context/auth-form-context\";\nimport AllPosts from \"./posts/pages/AllPosts\";\nimport UpdatePost from \"./posts/pages/UpdatePost\";\nimport Admin from \"./admin/pages/Admin\";\nimport Profile from \"./Profile/component/Profile\";\nimport Favourites from \"./Favourite/components/Favourites\";\nlet signoutTimer; // initialize the token timer\n\n// This is the main app that's load all the app components\nconst App = () => {\n  // initialize the Signed In state. This will be used to determine which component will be displayed.\n  // (Some links and pages will not be displayed if a user is not signed in)\n  const [token, setToken] = useState(false);\n  const [tokenExpirationDate, setTokenExpirationDate] = useState();\n  const [userId, setUserId] = useState(false);\n\n  // Handle the sign in for a user by setting up a new session token for that user\n  // And also set up the exiration date for the session.\n  const signIn = useCallback((uid, token, expirationDate) => {\n    setToken(token);\n    setUserId(uid);\n    const tokenExpirationDate =\n      expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n    setTokenExpirationDate(tokenExpirationDate);\n    localStorage.setItem(\n      \"userData\",\n      JSON.stringify({\n        userId: uid,\n        token: token,\n        expiration: tokenExpirationDate.toISOString(),\n      })\n    );\n  }, []);\n\n  // Handle the sign out for a use by deleting the session data from the browser\n  const signOut = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    setTokenExpirationDate(null);\n    localStorage.removeItem(\"userData\");\n    localStorage.removeItem(\"role\");\n    localStorage.removeItem(\"status\");\n  }, []);\n\n  // The following useEffect is used to handle the sign out function\n  useEffect(() => {\n    if (token && tokenExpirationDate) {\n      const remaininTime = tokenExpirationDate.getTime() - new Date().getTime();\n      signoutTimer = setTimeout(signOut, remaininTime);\n    } else {\n      clearTimeout(signoutTimer);\n    }\n  }, [token, signOut, tokenExpirationDate]);\n\n  // The following useEffect is used to handle the sign in function\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"));\n    if (\n      storedData &&\n      storedData.token &&\n      new Date(storedData.expiration) > new Date()\n    ) {\n      signIn(\n        storedData.userId,\n        storedData.token,\n        new Date(storedData.expiration)\n      );\n    }\n  }, [signIn]);\n\n  // Set up the routes based on a user state (signed in or not)\n  let routes;\n  if (token) {\n    // The following routes is for a signed-in user\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <AllPosts />\n        </Route>\n        <Route path=\"/:userId/journal\" exact>\n          <UserPosts />\n        </Route>\n        <Route path=\"/journals/new\" exact>\n          <NewPost />\n        </Route>\n        <Route path=\"/journals/:journalId\">\n          <UpdatePost />\n        </Route>\n\n        <Route path=\"/profile\" exact>\n          <Profile />\n        </Route>\n        <Route path=\"/favourite\" exact>\n          <Favourites />\n        </Route>\n\n        {localStorage.getItem(\"role\") === \"admin\" ? (\n          <Route path=\"/admin\" exact>\n            <Admin />\n          </Route>\n        ) : (\n          <Redirect to=\"/\" />\n        )}\n\n        {/* this check if role is admin then it redirect to /admin page otherwise redircet to / */}\n        {localStorage.getItem(\"role\") === \"admin\" ? (\n          <Redirect to=\"/admin\" />\n        ) : (\n          <Redirect to=\"/\" />\n        )}\n      </Switch>\n    );\n  } else {\n    // The following routes is for a guest (Not signed-in)\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <AllPosts />\n        </Route>\n        <Route path=\"/:userId/journal\" exact>\n          <UserPosts />\n        </Route>\n        <Route path=\"/auth\">\n          <AuthForms />\n        </Route>\n        <Route path=\"*\">\n          <AuthForms />\n        </Route>\n      </Switch>\n    );\n  }\n  return (\n    <AuthContext.Provider\n      value={{\n        isSignedIn: !!token,\n        token: token,\n        userId: userId,\n        signIn: signIn,\n        signOut: signOut,\n      }}\n    >\n      <Router>\n        <Navigation />\n        <main>{routes}</main>\n      </Router>\n    </AuthContext.Provider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst Backdrop = props => {\r\n  return ReactDOM.createPortal(\r\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\r\n    document.getElementById('backdrop-hook')\r\n  );\r\n};\r\n\r\nexport default Backdrop;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport Backdrop from \"./Backdrop\";\r\n\r\nimport \"./Modal.css\";\r\n\r\nconst ModalOverlay = (props) => {\r\n  const content = (\r\n    <div className={`modal ${props.className}`} style={props.style}>\r\n      <header className={`modal__header ${props.headerClass}`}>\r\n        <h2>{props.header}</h2>\r\n      </header>\r\n      <form\r\n        onSubmit={\r\n          props.onSubmit ? props.onSubmit : (event) => event.preventDefault()\r\n        }\r\n      >\r\n        <div className={`modal__content ${props.contentClass}`}>\r\n          {props.children}\r\n        </div>\r\n        <footer className={`modal__footer ${props.footerClass}`}>\r\n          {props.footer}\r\n        </footer>\r\n      </form>\r\n    </div>\r\n  );\r\n  return ReactDOM.createPortal(content, document.getElementById(\"modal-hook\"));\r\n};\r\n\r\nconst Modal = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      {props.show && <Backdrop onClick={props.onCancel} />}\r\n      <CSSTransition\r\n        in={props.show}\r\n        mountOnEnter\r\n        unmountOnExit\r\n        timeout={200}\r\n        classNames=\"modal\"\r\n      >\r\n        <ModalOverlay {...props} />\r\n      </CSSTransition>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from \"react\";\n\nimport Modal from \"./Modal\";\nimport \"../../components/FormElements/Button.css\";\nimport \"./ErrorModal.css\";\n\nconst ErrorModal = (props) => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.error}\n      footer={\n        <button className=\"btn\" onClick={props.onClear}>\n          Okay\n        </button>\n      }\n    >\n      <p>{props.error}</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import { useState, useCallback, useRef, useEffect } from \"react\";\r\n\r\nexport const useHttpClient = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState();\r\n\r\n  const activeHttpRequests = useRef([]);\r\n\r\n  const sendRequest = useCallback(\r\n    async (url, method = \"GET\", body = null, headers = {}) => {\r\n      setIsLoading(true);\r\n      const httpAbortCtrl = new AbortController();\r\n      activeHttpRequests.current.push(httpAbortCtrl);\r\n\r\n      try {\r\n        const response = await fetch(url, {\r\n          method,\r\n          body,\r\n          headers,\r\n          signal: httpAbortCtrl.signal,\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        activeHttpRequests.current = activeHttpRequests.current.filter(\r\n          (reqCtrl) => reqCtrl !== httpAbortCtrl\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(responseData.message);\r\n        }\r\n\r\n        setIsLoading(false);\r\n        return responseData;\r\n      } catch (err) {\r\n        setError(err.message);\r\n        setIsLoading(false);\r\n        throw err;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      activeHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort());\r\n    };\r\n  }, []);\r\n\r\n  return { isLoading, error, sendRequest, clearError };\r\n};\r\n","import { createContext } from \"react\";\r\n\r\n// The AuthContext will be used to share the authentication status between \r\n// the pages of the website to check if a user is signed in or not.\r\nexport const AuthContext = createContext({\r\n  isSignedIn: false,\r\n  userId: null,\r\n  token: null,\r\n  signIn: () => {},\r\n  signOut: () => {},\r\n});\r\n","import React, { useRef, useEffect } from \"react\";\r\n\r\nimport \"./CommentCard.css\";\r\n\r\n// The post header includes user image, and user name.\r\nconst CommentsCard = ({ comments }) => {\r\n  //I used useRef hook and scrollTOBottom function becasue I want when user enter the comment\r\n  //  it must show at last of the message means bottom of the message\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [comments]);\r\n\r\n  return (\r\n    <div className=\"comment-box\">\r\n      {/* if there is no post then shows a message otherwise shows all comment of that post */}\r\n      {comments.length === 0 ? (\r\n        <p className=\"empty\">This post not commented yet</p>\r\n      ) : (\r\n        comments.map((comment, index) => {\r\n          return (\r\n            <div className=\"comments\" key={index} ref={messagesEndRef}>\r\n              <div>\r\n                <p className=\"user\">{comment.name}</p>\r\n                <p className=\"message\">{comment.comment}</p>\r\n              </div>\r\n              <hr />\r\n            </div>\r\n          );\r\n        })\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommentsCard;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport Modal from \"../../shared/components/UIElements/Modal\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-form-context\";\r\nimport CommentsCard from \"./CommentsCard\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport \"./PostItem.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst UserPostItem = (props) => {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [comment, setComment] = useState(\"\");\r\n  const [comments, setComments] = useState([]);\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n  const [showCommentConfirmModal, setShowCommentConfirmModal] = useState(false);\r\n\r\n  let validationSchema = Yup.object({\r\n    comment: Yup.string().required(\"Journal Comment Cannot Be Empty!\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n\r\n    validationSchema,\r\n  });\r\n\r\n  const showDeleteWarningHandler = () => {\r\n    setShowConfirmModal(true);\r\n  };\r\n  const showCommmentModal = () => {\r\n    setShowCommentConfirmModal(true);\r\n  };\r\n  const cancelDeleteHandler = () => {\r\n    setShowConfirmModal(false);\r\n  };\r\n  const cancelCommentHandler = () => {\r\n    setShowCommentConfirmModal(false);\r\n  };\r\n\r\n  const confirmDeleteHandler = async () => {\r\n    setShowConfirmModal(false);\r\n    try {\r\n      await sendRequest(`/api/posts/${props.id}`, \"DELETE\", null, {\r\n        Authorization: \"Bearer \" + auth.token,\r\n      });\r\n      RemoveFavouriteWhenPostDelete();\r\n      props.onDelete(props.id);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const RemoveFavouriteWhenPostDelete = async () => {\r\n    setShowConfirmModal(false);\r\n    try {\r\n      await sendRequest(\r\n        \"/api/favourites/deletewithpost\",\r\n        \"DELETE\",\r\n        JSON.stringify({\r\n          postId: props.id,\r\n          userId: auth.userId,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n      props.onDelete(props.id);\r\n    } catch (error) {}\r\n  };\r\n\r\n  // This function only remove favourites posts from favourites table by clicking the delete button from favourite section\r\n  const RemoveFavourite = async () => {\r\n    setShowConfirmModal(false);\r\n    try {\r\n      await sendRequest(\r\n        \"/api/favourites/favourite\",\r\n        \"DELETE\",\r\n        JSON.stringify({\r\n          postId: props.id,\r\n          userId: auth.userId,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n      props.onDelete(props.id);\r\n    } catch (error) {}\r\n  };\r\n  // this functional handle the comment submission\r\n\r\n  const commentSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const res = await sendRequest(\r\n        \"/api/comments\",\r\n        \"POST\",\r\n        JSON.stringify({\r\n          postId: props.id,\r\n          userId: auth.userId,\r\n          comment: comment,\r\n          username: \"test\",\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n\r\n      // setComments fetch all comments and store it comments letiable\r\n      setComments(res.comments);\r\n\r\n      // setComment shows input field of the comment section after submission the input field will be empty\r\n      setComment(\"\");\r\n    } catch (error) {\r\n      alert(\"error\");\r\n    }\r\n  };\r\n  //handle the comment input\r\n  const commentHandleInput = (e) => {\r\n    setComment(e.target.value);\r\n  };\r\n  useEffect(() => {\r\n    async function fetchComment() {\r\n      try {\r\n        const res = await sendRequest(`/api/comments/${props.id}`);\r\n        setComments(res.comments);\r\n      } catch (error) {}\r\n    }\r\n    fetchComment();\r\n  }, [sendRequest, props.id]);\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Modal\r\n        show={showConfirmModal}\r\n        onCancel={cancelDeleteHandler}\r\n        header=\"Are you sure?\"\r\n        footerClass=\"post-item__modal-actions\"\r\n        footer={\r\n          <React.Fragment>\r\n            <button className=\"form-btn\" onClick={cancelDeleteHandler}>\r\n              CANCEL\r\n            </button>\r\n            <button\r\n              className=\"form-btn\"\r\n              onClick={props.Delete ? RemoveFavourite : confirmDeleteHandler}\r\n            >\r\n              DELETE\r\n            </button>\r\n          </React.Fragment>\r\n        }\r\n      >\r\n        <p>Are you sure you want to delete this journal?</p>\r\n      </Modal>\r\n      <li className=\"post-item\">\r\n        <Modal\r\n          show={showCommentConfirmModal}\r\n          onCancel={cancelDeleteHandler}\r\n          header=\"Comments\"\r\n          footerClass=\"post-item__modal-actions\"\r\n          footer={\r\n            <React.Fragment>\r\n              <button\r\n                className=\"form-btn\"\r\n                style={{ marginTop: \"0px\" }}\r\n                onClick={cancelCommentHandler}\r\n              >\r\n                CANCEL\r\n              </button>\r\n            </React.Fragment>\r\n          }\r\n        >\r\n          <div className=\"all-comments\">\r\n            <CommentsCard comments={comments} />\r\n          </div>\r\n          {/* <ErrorModal error={error} onClear={clearError} /> */}\r\n          {auth.isSignedIn ? (\r\n            <form>\r\n              {isLoading && <LoadingSpinner asOverlay />}\r\n              <label htmlFor=\"comment\">Comment:</label>\r\n              <input\r\n                className=\"form-control\"\r\n                type=\"text\"\r\n                id=\"comment\"\r\n                name=\"comment\"\r\n                value={comment}\r\n                autoComplete=\"off\"\r\n                onChange={commentHandleInput}\r\n              />\r\n              <div className=\"error\">\r\n                {formik.touched.comment && formik.errors.comment ? (\r\n                  <div>{formik.errors.comment}</div>\r\n                ) : null}\r\n              </div>\r\n\r\n              <button\r\n                className=\"form-btn\"\r\n                style={{ marginTop: \"0px\" }}\r\n                onClick={commentSubmitHandler}\r\n                disabled={comment.length === \"\" ? true : false}\r\n              >\r\n                Post\r\n              </button>\r\n            </form>\r\n          ) : null}\r\n        </Modal>\r\n        <Card className=\"post-item__content\">\r\n          {isLoading && <LoadingSpinner />}\r\n          {props.imageUrl && (\r\n            <div className=\"post-item__image\">\r\n              <img src={`${props.imageUrl}`} alt={props.title} />\r\n            </div>\r\n          )}\r\n          <div className=\"post-item__info\">\r\n            <h2>\r\n              {props.title} | {moment(props.publishDate).format(\"MMMM Do YYYY\")}\r\n            </h2>\r\n            <p>{props.postContent}</p>\r\n          </div>\r\n          <div className=\"post-item__actions\">\r\n            <div\r\n              className=\"post__option\"\r\n              style={{ display: `${props.display}` }}\r\n            >\r\n              <Link className=\"links\" to={`/journals/${props.id}`}>\r\n                <button className=\"button-17\">EDIT</button>\r\n              </Link>\r\n            </div>\r\n            <div className=\"post__option\">\r\n              <button className=\"button-17\" onClick={showDeleteWarningHandler}>\r\n                DELETE\r\n              </button>\r\n            </div>\r\n            <div\r\n              className=\"post__option\"\r\n              style={{ display: `${props.display}` }}\r\n            >\r\n              <button className=\"button-17\" onClick={() => showCommmentModal()}>\r\n                COMMENTS\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </li>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserPostItem;\r\n","import React, { useState } from \"react\";\r\n// import { useHistory } from \"react-router-dom\";\r\nimport ReactPaginate from \"react-paginate\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport UserPostItem from \"./UserPostItem\";\r\n\r\nimport \"./PostList.css\";\r\n\r\n// This component displays a list of UserPostItem\r\nconst UserPostList = (props) => {\r\n  // Switch to the add new journal page\r\n  // const history = useHistory();\r\n  // const addNewJounralHandler = () => {\r\n  //   history.push(\"/journals/new\");\r\n  // };\r\n\r\n  // Set up the search bar state\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  // Set up the pagination\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n  const postsPerPage = 5;\r\n  const pagesVisited = pageNumber * postsPerPage;\r\n  const displayPosts = props.items\r\n    .slice(pagesVisited, pagesVisited + postsPerPage)\r\n    .map((post) => {\r\n      return (\r\n        <UserPostItem\r\n          key={post.id}\r\n          id={post.id}\r\n          imageUrl={post.imageUrl}\r\n          title={post.title}\r\n          publishDate={post.publishDate}\r\n          postContent={post.content}\r\n          creatorId={post.creator}\r\n          onDelete={props.onDeletePost}\r\n          display={props.display}\r\n          Delete={props.delete}\r\n        />\r\n      );\r\n    });\r\n  const pageCount = Math.ceil(props.items.length / postsPerPage);\r\n  const changePageHandler = ({ selected }) => {\r\n    setPageNumber(selected);\r\n  };\r\n\r\n  // Check if there is no journals to display\r\n  if (props.items.length === 0) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>No Journals To Display</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Return a list of UserPostItem\r\n  return (\r\n    <ul className=\"post-list\">\r\n      <input\r\n        className=\"search-bar\"\r\n        type=\"text\"\r\n        placeholder=\"Search For A Journal By Title...\"\r\n        onChange={(e) => {\r\n          setSearchTerm(e.target.value);\r\n        }}\r\n      />\r\n\r\n      {searchTerm === \"\" && displayPosts}\r\n\r\n      {\r\n        // Filter for journals by title\r\n        searchTerm !== \"\" &&\r\n          props.items\r\n            .filter((val) => {\r\n              if (searchTerm === \"\") {\r\n                return val;\r\n              } else if (\r\n                val.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n              ) {\r\n                return val;\r\n              } else {\r\n                return null;\r\n              }\r\n            })\r\n            .map((val) => {\r\n              return (\r\n                <UserPostItem\r\n                  key={val.id}\r\n                  id={val.id}\r\n                  imageUrl={val.imageUrl}\r\n                  title={val.title}\r\n                  publishDate={val.publishDate}\r\n                  postContent={val.content}\r\n                  creatorId={val.creator}\r\n                  display={props.display}\r\n                  Delete={props.delete}\r\n                />\r\n              );\r\n            })\r\n      }\r\n\r\n      <ReactPaginate\r\n        previousLabel={\"Previous\"}\r\n        nextLabel={\"Next\"}\r\n        pageCount={pageCount}\r\n        onPageChange={changePageHandler}\r\n        containerClassName={\"paginationBttns\"}\r\n        previousLinkClassName={\"previousBttn\"}\r\n        nextLinkClassName={\"nextBttn\"}\r\n        disabledClassName={\"paginationDisabled\"}\r\n        activeClassName={\"paginationActive\"}\r\n      />\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default UserPostList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nimport UserPostList from \"../components/UserPostList\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\n\r\nconst UserPosts = () => {\r\n  const [loadedPosts, setLoadedPosts] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const userId = useParams().userId;\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `/api/posts/user/${userId}`\r\n        );\r\n        setLoadedPosts(responseData.posts);\r\n      } catch (error) {}\r\n    };\r\n    fetchPosts();\r\n  }, [sendRequest, userId]);\r\n\r\n  // Switch to the add new journal page\r\n  const history = useHistory();\r\n  const addNewJounralHandler = () => {\r\n    history.push(\"/journals/new\");\r\n  };\r\n\r\n  const postDeletedHandler = (deletedPostId) => {\r\n    setLoadedPosts((prevPosts) =>\r\n      prevPosts.filter((post) => post.id !== deletedPostId)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && !loadedPosts && (\r\n        <div className=\"center\">\r\n          <Card>\r\n            <h2>No Journals To Display</h2>\r\n            <button\r\n              className=\"form-btn\"\r\n              type=\"submit\"\r\n              onClick={addNewJounralHandler}\r\n            >\r\n              Add New Journal\r\n            </button>\r\n          </Card>\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedPosts && (\r\n        <UserPostList items={loadedPosts} onDeletePost={postDeletedHandler} />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserPosts;\r\n","import React from \"react\";\r\n\r\nimport \"./Header.css\";\r\n\r\nconst Header = (props) => {\r\n  return <header className=\"main-header\">{props.children}</header>;\r\n};\r\n\r\nexport default Header;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { AuthContext } from \"../../context/auth-form-context\";\r\nimport { useHttpClient } from \"../../hooks/http-hook\";\r\nimport \"./NavLinks.css\";\r\n\r\nconst NavLinks = ({ id }) => {\r\n  // auth will be used to determine which NavLinks will be displayed.\r\n  // All Journals - All users\r\n  // My Journals - registered users\r\n  // Add New Jounal - registered users\r\n  // Authnitcate - not registered users\r\n  // Admin - only for admin\r\n  const { sendRequest } = useHttpClient();\r\n  const auth = useContext(AuthContext);\r\n  const history = useHistory();\r\n  const signoutHandler = () => {\r\n    auth.signOut(true);\r\n    history.push(\"/auth\");\r\n  };\r\n  // check role of the user\r\n  useEffect(() => {\r\n    async function checkRole() {\r\n      try {\r\n        const res = await sendRequest(\r\n          `/api/users/${auth.userId}`\r\n        );\r\n        // this check if the the current user has been deactivated then he is signedout automatically\r\n        //  from the website when user referesh the page or try to access any route\r\n        if (res.username[0].status === \"deactivate\") {\r\n          auth.signOut(true);\r\n          history.push(\"/auth\");\r\n        }\r\n      } catch (error) {}\r\n    }\r\n    checkRole();\r\n  }, [sendRequest, auth.userId, auth.signOut, auth, history]);\r\n  // this get role of the then decide which navigations routes shows or which navigations routes not\r\n  const role = localStorage.getItem(\"role\");\r\n\r\n  return (\r\n    <ul className=\"nav-links\">\r\n      <li>\r\n        {role === \"admin\" ? null : (\r\n          <NavLink to=\"/\" exact>\r\n            ALL JOURNALS\r\n          </NavLink>\r\n        )}\r\n      </li>\r\n      {auth.isSignedIn && (\r\n        <li>\r\n          {role === \"admin\" ? null : (\r\n            <NavLink to={`/${auth.userId}/journal`}>MY JOURNALS</NavLink>\r\n          )}\r\n        </li>\r\n      )}\r\n      {auth.isSignedIn && (\r\n        <li>\r\n          {role === \"admin\" ? null : (\r\n            <NavLink to=\"/journals/new\">ADD NEW JOURNAL</NavLink>\r\n          )}\r\n        </li>\r\n      )}\r\n      {auth.isSignedIn && (\r\n        <li>\r\n          {role === \"admin\" ? null : (\r\n            <NavLink to=\"/favourite\">FAVOURITES</NavLink>\r\n          )}\r\n        </li>\r\n      )}\r\n      {!auth.isSignedIn && (\r\n        <li>\r\n          <NavLink to=\"/auth\">AUTHENTICATE</NavLink>\r\n        </li>\r\n      )}\r\n      {auth.isSignedIn && (\r\n        <li>\r\n          <NavLink to=\"/profile\">PROFILE</NavLink>\r\n        </li>\r\n      )}\r\n\r\n      {auth.isSignedIn && (\r\n        <li>\r\n          {/* if role admin then display this route */}\r\n          {role === \"admin\" ? <NavLink to=\"/admin\">ADMIN</NavLink> : null}\r\n        </li>\r\n      )}\r\n\r\n      {auth.isSignedIn && (\r\n        <li>\r\n          <button onClick={signoutHandler}>SIGN OUT</button>\r\n        </li>\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default NavLinks;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport \"./SideDrawer.css\";\r\n\r\nconst SideDrawer = (props) => {\r\n  const content = (\r\n    <CSSTransition in={props.show} timeout={300} classNames=\"slide-in-left\" mountOnEnter unmountOnExit>\r\n      <aside className=\"side-drawer\" onClick={props.onClick}>{props.children}</aside>\r\n    </CSSTransition>\r\n  );\r\n\r\n  return ReactDOM.createPortal(content, document.getElementById(\"drawer-hook\"));\r\n};\r\n\r\nexport default SideDrawer;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Header from \"./Header\";\r\nimport NavLinks from \"./NavLinks\";\r\nimport SideDrawer from \"./SideDrawer\";\r\nimport Backdrip from \"../UIElements/Backdrop\";\r\nimport \"./Navigation.css\";\r\n\r\nconst Navigation = (props) => {\r\n  const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n\r\n  const openDrawerHandler = () => {\r\n    setDrawerIsOpen(true);\r\n  };\r\n  const userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n\r\n  const closeDrawerHandler = () => {\r\n    setDrawerIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {drawerIsOpen && <Backdrip onClick={closeDrawerHandler} />}\r\n      <SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}>\r\n        <nav className=\"main-navigation__drawer-nav\">\r\n          <NavLinks />\r\n        </nav>\r\n      </SideDrawer>\r\n\r\n      <Header>\r\n        <button\r\n          className=\"main-navigation__menu-btn\"\r\n          onClick={openDrawerHandler}\r\n        >\r\n          <span />\r\n          <span />\r\n          <span />\r\n        </button>\r\n        <h1 className=\"main-navigation__title\">\r\n          <Link to=\"/\">Journaly</Link>\r\n        </h1>\r\n        <nav className=\"main-navigation__header-nav\">\r\n          <NavLinks id={userData == null ? \"error\" : userData.userId} />\r\n        </nav>\r\n      </Header>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-form-context\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport moment from \"moment\";\r\n\r\nimport \"./NewPost.css\";\r\n\r\nconst NewPost = () => {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const history = useHistory();\r\n\r\n  //Here we are going to set user name\r\n  const [username, SetUserName] = useState(\"\");\r\n  const [userimage, SetUserImage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchName() {\r\n      try {\r\n        const res = await sendRequest(\r\n          `/api/users/${auth.userId}`\r\n        );\r\n        SetUserName(res.username[0].name);\r\n        SetUserImage(res.username[0].imageUrl);\r\n      } catch (error) {}\r\n    }\r\n    fetchName();\r\n  }, [sendRequest, auth.userId]);\r\n  const initialValues = {\r\n    title: \"\",\r\n    content: \"\",\r\n    image: \"\",\r\n    username: username,\r\n    userimage: userimage,\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"title\", values.title);\r\n      formData.append(\"content\", values.content);\r\n      formData.append(\"userId\", auth.userId);\r\n      formData.append(\"username\", values.username);\r\n      formData.append(\"image\", values.image);\r\n      formData.append(\"userimage\", values.userimage);\r\n\r\n      formData.append(\"filterDate\", moment(new Date()).format(\"YYYY-MM-DD\"));\r\n      await sendRequest(\"/api/posts\", \"POST\", formData, {\r\n        Authorization: \"Bearer \" + auth.token,\r\n      });\r\n      // Redirect the user to next page\r\n      history.push(\"/\");\r\n    } catch (error) {}\r\n  };\r\n\r\n  let validationSchema = Yup.object({\r\n    title: Yup.string().required(\"Journal Title Cannot Be Empty!\"),\r\n    content: Yup.string().required(\"Journal Content Cannot Be Empty!\"),\r\n    // image: Yup.string().required(\"Image Cannot Be Empty!\"),\r\n  });\r\n\r\n  // Set the formik for form validation\r\n  const formik = useFormik({\r\n    initialValues,\r\n    onSubmit,\r\n    validationSchema,\r\n    enableReinitialize: true,\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <form className=\"journal-form\" onSubmit={formik.handleSubmit}>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <label htmlFor=\"title\">Title:</label>\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          id=\"title\"\r\n          name=\"title\"\r\n          {...formik.getFieldProps(\"title\")}\r\n        />\r\n        <div className=\"error\">\r\n          {formik.touched.title && formik.errors.title ? (\r\n            <div>{formik.errors.title}</div>\r\n          ) : null}\r\n        </div>\r\n\r\n        <label htmlFor=\"content\">Journal Content:</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"content\"\r\n          rows=\"10\"\r\n          name=\"content\"\r\n          placeholder=\"Type daily journal here...\"\r\n          {...formik.getFieldProps(\"content\")}\r\n        />\r\n        <div className=\"error\">\r\n          {formik.touched.content && formik.errors.content ? (\r\n            <div>{formik.errors.content}</div>\r\n          ) : null}\r\n        </div>\r\n\r\n        <input\r\n          type=\"file\"\r\n          name=\"image\"\r\n          accept=\".jpg,.png,.jpeg\"\r\n          onChange={(event) =>\r\n            formik.setFieldValue(\"image\", event.target.files[0])\r\n          }\r\n        />\r\n\r\n        <button\r\n          className=\"form-btn\"\r\n          type=\"submit\"\r\n          disabled={!(formik.dirty && formik.isValid)}\r\n        >\r\n          Add Journal\r\n        </button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport * as Yup from \"yup\"; // for form validation\r\nimport { AuthContext } from \"../../shared/context/auth-form-context\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport Modal from \"../../shared/components/UIElements/Modal\";\r\nimport \"./AuthForms.css\";\r\n\r\nconst AuthForms = () => {\r\n  const auth = useContext(AuthContext);\r\n  // Authentication mode flag, either sign in or sign up.\r\n  const [isSigninMode, setIsSigninMode] = useState(true);\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const cancelDeleteHandler = () => {\r\n    setShowConfirmModal(false);\r\n  };\r\n  // Set the initaial values for the form inputs\r\n  const initialValues = {\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    if (isSigninMode) {\r\n      try {\r\n        const respnseData = await sendRequest(\r\n          `/api/users/signin`,\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: values.email,\r\n            password: values.password,\r\n          }),\r\n          { \"Content-Type\": \"application/json\" }\r\n        );\r\n\r\n        // Here we set the user role whic is comming from database it is only does when we sign in .\r\n        // we check on the base of role then we decide which route is for admin and which role is for user.\r\n        localStorage.setItem(\"role\", respnseData.role);\r\n        // Here we set the user status whic is comming from database it is only does when we sign in .\r\n        // we check on the base of status we check the status of user.\r\n        localStorage.setItem(\"status\", respnseData.status);\r\n        // check if status is equal to deactivate then this condition true\r\n        if (localStorage.getItem(\"status\") === \"deactivate\") {\r\n          // when condtion is true the pop up is come and say the error \"your account has been deactivated\"\r\n          setShowConfirmModal(true);\r\n          // here we are removing the role because we want to clear the data when user deactivated\r\n          localStorage.removeItem(\"role\");\r\n          localStorage.removeItem(\"status\");\r\n          return;\r\n        } else {\r\n          auth.signIn(respnseData.userId, respnseData.token);\r\n        }\r\n      } catch (error) {}\r\n    } else {\r\n      try {\r\n        const respnseData = await sendRequest(\r\n          `/api/users/signup`,\r\n          \"POST\",\r\n          JSON.stringify({\r\n            name: values.name,\r\n            email: values.email,\r\n            password: values.password,\r\n          }),\r\n          { \"Content-Type\": \"application/json\" }\r\n        );\r\n\r\n        // we set role of the user in localstorage like role:'admin/user'\r\n        localStorage.setItem(\"role\", respnseData.role);\r\n        auth.signIn(respnseData.userId, respnseData.token);\r\n      } catch (error) {}\r\n    }\r\n  };\r\n\r\n  // Form validation to check for the following:\r\n  // Required name, Required email, Required Password\r\n  // Valid email, and Valid password (at least 8 char)\r\n  let validationSchema;\r\n  if (!isSigninMode) {\r\n    // if a user is in the signup mode, the name will be required\r\n    validationSchema = Yup.object({\r\n      name: Yup.string().required(\"Name Required!\"),\r\n      email: Yup.string()\r\n        .email(\"Invalid Email Format!\")\r\n        .required(\"Email Required!\"),\r\n      password: Yup.string()\r\n        .min(8, \"Password must be at least 8 characters\")\r\n        .required(\"Password Required!\"),\r\n    });\r\n  } else {\r\n    // if a user is in the signin mode the name is not required\r\n    validationSchema = Yup.object({\r\n      name: Yup.string().notRequired(),\r\n      email: Yup.string()\r\n        .email(\"Invalid Email Format!\")\r\n        .required(\"Email Required!\"),\r\n      password: Yup.string()\r\n        .min(8, \"Password must be at least 8 characters\")\r\n        .required(\"Password Required!\"),\r\n    });\r\n  }\r\n\r\n  // Set the formik\r\n  const formik = useFormik({\r\n    initialValues,\r\n    onSubmit,\r\n    validationSchema,\r\n  });\r\n\r\n  // Handle the switch to sign in or switch to sign up button\r\n  const switchAuthFormHandler = () => {\r\n    // Clear all the inputs, errors and reset all the visited fields\r\n    formik.resetForm();\r\n    // Check for the Auth Mode\r\n    if (isSigninMode) {\r\n      setIsSigninMode(false);\r\n    } else {\r\n      setIsSigninMode(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"form-box\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        {/* this model shows when a user not active */}\r\n        <Modal\r\n          show={showConfirmModal}\r\n          onCancel={cancelDeleteHandler}\r\n          header=\"User Status\"\r\n          footerClass=\"post-item__modal-actions\"\r\n          footer={\r\n            <React.Fragment>\r\n              <button\r\n                className=\"form-btn\"\r\n                style={{ marginTop: \"0px\" }}\r\n                onClick={cancelDeleteHandler}\r\n              >\r\n                CANCEL\r\n              </button>\r\n            </React.Fragment>\r\n          }\r\n        >\r\n          <h2 style={{ textAlign: \"center\" }}>\r\n            Your Account has been Deactivated\r\n          </h2>\r\n        </Modal>\r\n        ;<h2>{isSigninMode ? \"Sign In\" : \"Sign Up\"}</h2>\r\n        <h3>{isSigninMode ? \"Welcome Back\" : \"It's Quick and Easy\"}</h3>\r\n        <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n          {!isSigninMode && (\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"name\">Full Name</label>\r\n              <input\r\n                className=\"form-control\"\r\n                type=\"text\"\r\n                id=\"name\"\r\n                name=\"name\"\r\n                {...formik.getFieldProps(\"name\")}\r\n              />\r\n              <div className=\"error\">\r\n                {formik.touched.name && formik.errors.name ? (\r\n                  <div>{formik.errors.name}</div>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          )}\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email\">Email Address</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"email\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              {...formik.getFieldProps(\"email\")}\r\n            />\r\n            <div className=\"error\">\r\n              {formik.touched.email && formik.errors.email ? (\r\n                <div>{formik.errors.email}</div>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              {...formik.getFieldProps(\"password\")}\r\n            />\r\n            <div className=\"error\">\r\n              {formik.touched.password && formik.errors.password ? (\r\n                <div>{formik.errors.password}</div>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n          <button\r\n            className=\"form-btn\"\r\n            type=\"submit\"\r\n            disabled={!(formik.dirty && formik.isValid)}\r\n          >\r\n            {isSigninMode ? \"SIGN IN\" : \"SIGN UP\"}\r\n          </button>\r\n        </form>\r\n        <button className=\"switch-form\" onClick={switchAuthFormHandler}>\r\n          {isSigninMode ? \"Create a New Account\" : \"Click Here To Sign In\"}\r\n        </button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AuthForms;\r\n","import React from \"react\";\r\n\r\nimport \"./UserImage.css\";\r\n\r\n// This component is responsible on displaying a user image inside a circle with elegant style\r\nconst UserImage = (props) => {\r\n  return (\r\n    <div className={`profileImg ${props.className}`} style={props.style}>\r\n      <img\r\n        src={`${props.image}`}\r\n        alt={props.alt}\r\n        style={{ width: props.width, height: props.width }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserImage;\r\n","import React from \"react\";\r\nimport UserImage from \"../../shared/components/UIElements/UserImage\";\r\n\r\nimport \"./PostHeader.css\";\r\n\r\n// The post header includes user image, and user name.\r\nconst PostHeader = ({ username, userImage }) => {\r\n  const userInfo = {\r\n    id: \"u1\",\r\n    name: username,\r\n    image: userImage,\r\n    places: 3,\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-item__content\">\r\n      <div className=\"user-item__image\">\r\n        <UserImage image={userInfo.image} alt={userInfo.name} />\r\n      </div>\r\n      <div className=\"user-item__info\">\r\n        <h2>{userInfo.name}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostHeader;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport PostHeader from \"./PostHeader\";\r\nimport { AuthContext } from \"../../shared/context/auth-form-context\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport Modal from \"../../shared/components/UIElements/Modal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport CommentsCard from \"./CommentsCard\";\r\n\r\n// react-icons\r\nimport { BsHeartFill } from \"react-icons/bs\";\r\nimport { AiOutlineLike } from \"react-icons/ai\";\r\n\r\nimport { VscComment } from \"react-icons/vsc\";\r\n//stylesheet\r\nimport \"./PostItem.css\";\r\n\r\nconst PostItem = (props) => {\r\n  const auth = useContext(AuthContext);\r\n\r\n  const { sendRequest, isLoading } = useHttpClient();\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n  const [Disabled, setLikeDisabled] = useState(false);\r\n  const [DisabledFavourite, setFavouriteDisabled] = useState(false);\r\n\r\n  const [comment, setComment] = useState(\"\");\r\n  const [comments, setComments] = useState([]);\r\n  const [getlikes, setGetLikes] = useState(0);\r\n\r\n  const showCommentHandlerModal = () => {\r\n    setShowConfirmModal(true);\r\n  };\r\n\r\n  const cancelDeleteHandler = () => {\r\n    setShowConfirmModal(false);\r\n  };\r\n\r\n  // this functional handle the comment submission\r\n\r\n  const commentSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const res = await sendRequest(\r\n        \"/api/comments\",\r\n        \"POST\",\r\n        JSON.stringify({\r\n          postId: props.id,\r\n          userId: auth.userId,\r\n          comment: comment,\r\n          username: props.username,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n\r\n      // setComments fetch all comments and store it comments letiable\r\n      setComments(res.comments);\r\n      // setComment shows input field of the comment section after submission the input field will be empty\r\n      setComment(\"\");\r\n    } catch (error) {\r\n      alert(\"error\");\r\n    }\r\n  };\r\n\r\n  let validationSchema = Yup.object({\r\n    comment: Yup.string().required(\"Journal Comment Cannot Be Empty!\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n\r\n    validationSchema,\r\n  });\r\n  //handle favourite submission\r\n  // This function is used to add user to favourite post from favourites table\r\n\r\n  const AddFavourite = async () => {\r\n    try {\r\n      const res = await sendRequest(\r\n        \"/api/favourites\",\r\n        \"POST\",\r\n        JSON.stringify({\r\n          userId: auth.userId,\r\n          postId: props.id,\r\n          title: props.title,\r\n          content: props.postContent,\r\n          username: props.username,\r\n          publishDate: props.publishDate,\r\n          imageUrl: props.imageUrl,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n      // setFavouriteDisabled(res.disable); this set favourite or not\r\n\r\n      setFavouriteDisabled(res.disable);\r\n    } catch (error) {}\r\n  };\r\n  // This function is used to Remove user from favourite post from favourites table\r\n  const RemoveFavourite = async () => {\r\n    try {\r\n      const res = await sendRequest(\r\n        \"/api/favourites\",\r\n        \"DELETE\",\r\n        JSON.stringify({\r\n          postId: props.id,\r\n          userId: auth.userId,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n\r\n      // setFavouriteDisabled(res.disable); this set favourite or not\r\n\r\n      setFavouriteDisabled(res.disable);\r\n    } catch (error) {}\r\n  };\r\n\r\n  //handle like submission\r\n\r\n  const likePostHandler = async () => {\r\n    try {\r\n      const res = await sendRequest(\r\n        \"/api/likes\",\r\n        \"POST\",\r\n        JSON.stringify({\r\n          postId: props.id,\r\n          userId: auth.userId,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n      //fetchLikecheck(); this function call and get latest likes from the database likes table\r\n      fetchLikecheck();\r\n      // setGetLikes(res.res); this set all latest likes so that we can shows that on users screen\r\n      setGetLikes(res.res);\r\n    } catch (error) {}\r\n  };\r\n\r\n  //handle unlike submission\r\n\r\n  const unlikePostHandler = async () => {\r\n    try {\r\n      const res = await sendRequest(\r\n        \"/api/likes\",\r\n        \"DELETE\",\r\n        JSON.stringify({\r\n          postId: props.id,\r\n          userId: auth.userId,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n      //fetchLikecheck(); this function call and get latest likes from the database likes table\r\n\r\n      fetchLikecheck();\r\n      // setGetLikes(res.res); this set all latest likes so that we can shows that on users screen\r\n\r\n      setGetLikes(res.res);\r\n    } catch (error) {}\r\n  };\r\n  //check weather post has been liked or not\r\n  const fetchLikecheck = async () => {\r\n    try {\r\n      const responseData2 = await sendRequest(\r\n        `/api/likes/${auth.userId}/${props.id}`\r\n      );\r\n      //if we get the post has been already liked then it return true when it return true\r\n      // it means the like buttn of that post turn into unlike button\r\n      setLikeDisabled(responseData2.disable);\r\n    } catch (error) {}\r\n  };\r\n  // this function check and fetch likes of all post and shows on the screen\r\n  useEffect(() => {\r\n    const fetchLikecheck = async () => {\r\n      try {\r\n        const responseData2 = await sendRequest(\r\n          `/api/likes/${auth.userId}/${props.id}`\r\n        );\r\n        //if we get the post has been already liked then it return true when it return true\r\n        // it means the like buttn of that post turn into unlike button\r\n        setLikeDisabled(responseData2.disable);\r\n      } catch (error) {}\r\n    };\r\n    fetchLikecheck();\r\n  }, [sendRequest, auth.userId, props.id]);\r\n  // this function fetch the count of likes of every post\r\n  useEffect(() => {\r\n    async function countLikes() {\r\n      try {\r\n        const res = await sendRequest(`/api/likes/${props.id}`);\r\n        setGetLikes(res.likeslength);\r\n      } catch (error) {}\r\n    }\r\n    countLikes();\r\n  }, [sendRequest, props.id]);\r\n  // this function fetch comments of every post sepratelly\r\n  useEffect(() => {\r\n    async function fetchComment() {\r\n      try {\r\n        const res = await sendRequest(`/api/comments/${props.id}`);\r\n        setComments(res.comments);\r\n      } catch (error) {}\r\n    }\r\n    fetchComment();\r\n  }, [sendRequest, props.id]);\r\n\r\n  // this function check and fetch likes of all post and shows on the screen\r\n  useEffect(() => {\r\n    const fetchFavouritecheck = async () => {\r\n      try {\r\n        const responseData2 = await sendRequest(\r\n          `/api/favourites/${auth.userId}/${props.id}`\r\n        );\r\n        //if we get the post has been already liked then it return true when it return true\r\n        // it means the like buttn of that post turn into unlike button\r\n        setFavouriteDisabled(responseData2.disable);\r\n      } catch (error) {}\r\n    };\r\n    fetchFavouritecheck();\r\n  }, [sendRequest, auth.userId, props.id]);\r\n\r\n  //handle the comment input\r\n  const commentHandleInput = (e) => {\r\n    setComment(e.target.value);\r\n  };\r\n  console.log(comment.length);\r\n  return (\r\n    <li className=\"post-item\">\r\n      <Modal\r\n        show={showConfirmModal}\r\n        onCancel={cancelDeleteHandler}\r\n        header=\"Comments\"\r\n        footerClass=\"post-item__modal-actions\"\r\n        footer={\r\n          <React.Fragment>\r\n            <button\r\n              className=\"form-btn\"\r\n              style={{ marginTop: \"0px\" }}\r\n              onClick={cancelDeleteHandler}\r\n            >\r\n              CANCEL\r\n            </button>\r\n          </React.Fragment>\r\n        }\r\n      >\r\n        <div className=\"all-comments\">\r\n          <CommentsCard comments={comments} />\r\n        </div>\r\n        {/* <ErrorModal error={error} onClear={clearError} /> */}\r\n        {auth.isSignedIn ? (\r\n          <form>\r\n            {isLoading && <LoadingSpinner asOverlay />}\r\n            <label htmlFor=\"comment\">Comment:</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              id=\"comment\"\r\n              name=\"comment\"\r\n              value={comment}\r\n              autoComplete=\"off\"\r\n              onChange={commentHandleInput}\r\n            />\r\n            <div className=\"error\">\r\n              {formik.touched.comment && formik.errors.comment ? (\r\n                <div>{formik.errors.comment}</div>\r\n              ) : null}\r\n            </div>\r\n\r\n            <button\r\n              className=\"form-btn\"\r\n              style={{ marginTop: \"0px\" }}\r\n              onClick={commentSubmitHandler}\r\n              disabled={comment.length === \"\" ? true : false}\r\n            >\r\n              Post\r\n            </button>\r\n          </form>\r\n        ) : null}\r\n      </Modal>\r\n\r\n      <Card className=\"post-item__content\">\r\n        <div className=\"post-header\">\r\n          {/* this user name come from database from post table where field is username */}\r\n          <PostHeader\r\n            username={props.postusername}\r\n            userImage={props.userimage}\r\n          />\r\n        </div>\r\n        {props.imageUrl === null ? null : (\r\n          <div className=\"post-item__image\">\r\n            <img src={`${props.imageUrl}`} alt={props.comment} />\r\n          </div>\r\n        )}\r\n        <div className=\"post-item__info\">\r\n          <h2>\r\n            {props.title} | {moment(props.publishDate).format(\"MMMM Do YYYY\")}\r\n          </h2>\r\n          <p>{props.postContent}</p>\r\n        </div>\r\n        <div\r\n          className=\"post-item__likes\"\r\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n        >\r\n          <p className=\"likes-number\">\r\n            {getlikes === 0 ? (\r\n              <div className=\"set-icons\">\r\n                <AiOutlineLike style={{ fontSize: \"25px\", color: \"gray\" }} />\r\n                {getlikes}\r\n              </div>\r\n            ) : (\r\n              <div className=\"set-icons\">\r\n                <AiOutlineLike style={{ fontSize: \"25px\", color: \"#174ea6\" }} />\r\n                {getlikes}\r\n              </div>\r\n            )}\r\n          </p>\r\n          <p\r\n            className=\"likes-number\"\r\n            style={{\r\n              marginRight: \"5px\",\r\n              display: `${auth.isSignedIn ? \"block\" : \"none\"}`,\r\n            }}\r\n          >\r\n            {DisabledFavourite ? (\r\n              <BsHeartFill\r\n                style={{ fontSize: \"25px\", color: \"red\" }}\r\n                onClick={() => RemoveFavourite()}\r\n              />\r\n            ) : (\r\n              <BsHeartFill\r\n                style={{ fontSize: \"25px\", color: \"gray\" }}\r\n                onClick={() => AddFavourite()}\r\n              />\r\n            )}\r\n          </p>\r\n          <p className=\"likes-number\" style={{ marginRight: \"5px\" }}>\r\n            {comments.length === 0 ? (\r\n              <div className=\"set-icons\">\r\n                {comments.length}\r\n                <VscComment style={{ fontSize: \"25px\", color: \"gray\" }} />\r\n              </div>\r\n            ) : (\r\n              <div className=\"set-icons\">\r\n                {comments.length}\r\n                <VscComment style={{ fontSize: \"25px\", color: \"#174ea6\" }} />\r\n              </div>\r\n            )}\r\n          </p>\r\n        </div>\r\n        <div className=\"post-item__actions\">\r\n          <div className=\"post__option\">\r\n            {Disabled ? (\r\n              <button\r\n                className=\"button-17\"\r\n                onClick={auth.isSignedIn ? unlikePostHandler : null}\r\n              >\r\n                Unlike\r\n              </button>\r\n            ) : (\r\n              <button\r\n                className=\"button-17\"\r\n                onClick={auth.isSignedIn ? likePostHandler : null}\r\n              >\r\n                Like\r\n              </button>\r\n            )}\r\n          </div>\r\n          {/* <div className=\"post__option\">\r\n            <Button onClick={likePostHandler}>Favourite</Button>\r\n          </div> */}\r\n\r\n          <div className=\"post__option\">\r\n            <button className=\"button-17\" onClick={showCommentHandlerModal}>\r\n              Comment\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default PostItem;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\n\r\nimport PostItem from \"./PostItem\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport { AuthContext } from \"../../shared/context/auth-form-context\";\r\nimport \"./PostList.css\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n// This component displays a list of PostItem\r\nconst PostList = (props) => {\r\n  //get auth Id from authContext\r\n  const auth = useContext(AuthContext);\r\n  // Set up the search bar state\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [, setUserImage] = useState(\"\");\r\n\r\n  //get  user name and image from user table so that we can show it on the Post Header (name and image)\r\n  const { sendRequest } = useHttpClient();\r\n\r\n  useEffect(() => {\r\n    async function fetchUserName() {\r\n      try {\r\n        const res = await sendRequest(\r\n          `/api/users/${auth.userId}`\r\n        );\r\n        setUsername(res.username[0].name);\r\n        setUserImage(res.username[0].imageUrl);\r\n      } catch (error) {}\r\n    }\r\n    fetchUserName();\r\n  }, [sendRequest, auth.userId]);\r\n\r\n  // Set up the pagination\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n  const postsPerPage = 5;\r\n  const pagesVisited = pageNumber * postsPerPage;\r\n  const displayPosts = props.items\r\n    .slice(pagesVisited, pagesVisited + postsPerPage)\r\n    .map((post) => {\r\n      return (\r\n        <PostItem\r\n          key={post.id}\r\n          id={post.id}\r\n          imageUrl={post.imageUrl}\r\n          title={post.title}\r\n          publishDate={post.publishDate}\r\n          postContent={post.content}\r\n          creatorId={post.userId}\r\n          username={username}\r\n          userimage={post.userimageUrl}\r\n          postusername={post.username}\r\n        />\r\n      );\r\n    });\r\n  const pageCount = Math.ceil(props.items.length / postsPerPage);\r\n  const changePageHandler = ({ selected }) => {\r\n    setPageNumber(selected);\r\n  };\r\n  // Check if there is no journals to display\r\n  if (props.items.length === 0) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>No Journals To Display. Please Check Back Later</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Return a list of PostItem\r\n  return (\r\n    <ul className=\"post-list\">\r\n      <input\r\n        className=\"search-bar\"\r\n        type=\"text\"\r\n        placeholder=\"Search For A Journal By Title...\"\r\n        onChange={(e) => {\r\n          setSearchTerm(e.target.value);\r\n        }}\r\n      />\r\n\r\n      {/* Date Picker for select date for filtering */}\r\n      {/* the styling of this section whitin index.csss */}\r\n\r\n      {searchTerm === \"\" && displayPosts}\r\n      {\r\n        // Filter for journals by title\r\n        searchTerm !== \"\" &&\r\n          props.items\r\n            .filter((val) => {\r\n              if (searchTerm === \"\") {\r\n                return val;\r\n              } else if (\r\n                val.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n              ) {\r\n                return val;\r\n              } else {\r\n                return null;\r\n              }\r\n            })\r\n            .map((val) => {\r\n              return (\r\n                <PostItem\r\n                  key={val.id}\r\n                  id={val.id}\r\n                  imageUrl={val.imageUrl}\r\n                  title={val.title}\r\n                  publishDate={val.publishDate}\r\n                  postContent={val.content}\r\n                  creatorId={val.userId}\r\n                  userimage={val.userimageUrl}\r\n                  postusername={val.username}\r\n                />\r\n              );\r\n            })\r\n      }\r\n\r\n      <ReactPaginate\r\n        previousLabel={\"Previous\"}\r\n        nextLabel={\"Next\"}\r\n        pageCount={pageCount}\r\n        onPageChange={changePageHandler}\r\n        containerClassName={\"paginationBttns\"}\r\n        previousLinkClassName={\"previousBttn\"}\r\n        nextLinkClassName={\"nextBttn\"}\r\n        disabledClassName={\"paginationDisabled\"}\r\n        activeClassName={\"paginationActive\"}\r\n      />\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport PostList from \"../components/PostList\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst AllPosts = () => {\r\n  const [loadedPosts, setLoadedPosts] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [filteredPosts, setFilteredPosts] = useState([]);\r\n\r\n  const endDateFormat = moment(endDate).format(\"YYYY-MM-DD\");\r\n  const startDateFormat = moment(startDate).format(\"YYYY-MM-DD\");\r\n\r\n  let { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\"/api/posts\");\r\n        setLoadedPosts(responseData.posts);\r\n        setFilteredPosts(responseData.posts);\r\n        // setFilteredPosts(responseData.posts);\r\n      } catch (error) {}\r\n    };\r\n    fetchPosts();\r\n  }, [sendRequest]);\r\n  // This function handle the filter post functionality\r\n  const filterPostsByDate = async () => {\r\n    if (endDate === \"\") {\r\n      return;\r\n    }\r\n    if (startDate === \"\") {\r\n      return;\r\n    }\r\n    try {\r\n      const formData = {\r\n        startDateFormat,\r\n        endDateFormat,\r\n      };\r\n      await axios\r\n        .post(`/api/posts/filter`, formData)\r\n        .then((res) => {\r\n          setFilteredPosts(res.data.result);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    } catch (error) {}\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {loadedPosts === \"\" ? null : (\r\n        <section className=\"Date-picker-wrapper post-list\">\r\n          <div className=\"Date-picker\">\r\n            {/* This is start data */}\r\n\r\n            <DatePicker\r\n              onChange={setStartDate}\r\n              value={startDate}\r\n              selected={startDate}\r\n              dateFormat=\"dd/MM/yyyy\"\r\n              placeholderText=\"Enter The Start Date\"\r\n              className=\"startdate\"\r\n              maxDate={new Date()}\r\n            />\r\n            <p className=\"to\">to</p>\r\n            {/* This is end Date */}\r\n            <DatePicker\r\n              onChange={setEndDate}\r\n              value={endDate}\r\n              selected={endDate}\r\n              dateFormat=\"dd/MM/yyyy\"\r\n              placeholderText=\"Enter The End Date\"\r\n              className=\"enddate\"\r\n              maxDate={new Date()}\r\n            />\r\n            <button\r\n              className=\"filter-btn\"\r\n              onClick={() => filterPostsByDate()}\r\n              disabled={endDate === \"\" && startDate === \"\" ? true : false}\r\n            >\r\n              Filter\r\n            </button>\r\n          </div>\r\n        </section>\r\n      )}\r\n\r\n      {!isLoading && loadedPosts && (\r\n        <PostList\r\n          items={filteredPosts.length !== 0 ? loadedPosts : filteredPosts}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AllPosts;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-form-context\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\n\r\n// This page will be loaded when the edit button is pressed.\r\n// It will have a form with the values of a jounal that a user wants to edit\r\nconst UpdatePost = () => {\r\n  const auth = useContext(AuthContext);\r\n  const postId = useParams().journalId;\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [loadedPost, setLoadedPost] = useState();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const fetchPost = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `/api/posts/${postId}`\r\n        );\r\n        setLoadedPost(responseData.post);\r\n      } catch (error) {}\r\n    };\r\n    fetchPost();\r\n  }, [sendRequest, postId]);\r\n\r\n  const initialValues = {\r\n    title: \"\",\r\n    content: \"\",\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    try {\r\n      await sendRequest(\r\n        `/api/posts/${postId}`,\r\n        \"PATCH\",\r\n        JSON.stringify({\r\n          id: auth.userId,\r\n          title: values.title,\r\n          content: values.content,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n      history.push(\"/\" + auth.userId + \"/journal\");\r\n    } catch (error) {}\r\n  };\r\n\r\n  let validationSchema = Yup.object({\r\n    title: Yup.string().required(\"Journal Title Cannot Be Empty!\"),\r\n    content: Yup.string().required(\"Journal Content Cannot Be Empty!\"),\r\n  });\r\n\r\n  // Set the formik for form validation\r\n  const formik = useFormik({\r\n    initialValues,\r\n    enableReinitialize: true,\r\n    onSubmit,\r\n    validationSchema,\r\n  });\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (loadedPost) {\r\n    initialValues.title = loadedPost[0].title;\r\n    initialValues.content = loadedPost[0].content;\r\n  }\r\n\r\n  if (!loadedPost && !error) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>Could not find journal!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n\r\n      {!isLoading && loadedPost && (\r\n        <form className=\"journal-form\" onSubmit={formik.handleSubmit}>\r\n          <label htmlFor=\"title\">Title:</label>\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            id=\"title\"\r\n            name=\"title\"\r\n            {...formik.getFieldProps(\"title\")}\r\n          />\r\n          <div className=\"error\">\r\n            {formik.touched.title && formik.errors.title ? (\r\n              <div>{formik.errors.title}</div>\r\n            ) : null}\r\n          </div>\r\n\r\n          <label htmlFor=\"content\">Journal Content:</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"content\"\r\n            rows=\"10\"\r\n            name=\"content\"\r\n            placeholder=\"Type daily journal here...\"\r\n            {...formik.getFieldProps(\"content\")}\r\n          />\r\n          <div className=\"error\">\r\n            {formik.touched.content && formik.errors.content ? (\r\n              <div>{formik.errors.content}</div>\r\n            ) : null}\r\n          </div>\r\n\r\n          <button\r\n            className=\"form-btn\"\r\n            type=\"submit\"\r\n            disabled={!(formik.dirty && formik.isValid)}\r\n          >\r\n            Update Journal\r\n          </button>\r\n        </form>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdatePost;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Chart,\r\n  BarSeries,\r\n  Title,\r\n  ArgumentAxis,\r\n  ValueAxis,\r\n} from \"@devexpress/dx-react-chart-bootstrap4\";\r\nimport \"@devexpress/dx-react-chart-bootstrap4/dist/dx-react-chart-bootstrap4.css\";\r\nimport { Animation } from \"@devexpress/dx-react-chart\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nconst UsersCountChart = () => {\r\n  // Here we fetch all users in users letiable\r\n  const [users, setAllUsers] = useState([]);\r\n  const { sendRequest } = useHttpClient();\r\n\r\n  // when call this component this useEffect call and fetch all users\r\n  // from database and setAllUsers in users letiable.\r\n  useEffect(() => {\r\n    async function fetchAllUsers() {\r\n      try {\r\n        const res = await sendRequest(`/api/users/`);\r\n        setAllUsers(res.users);\r\n      } catch (error) {}\r\n    }\r\n    fetchAllUsers();\r\n  }, [sendRequest]);\r\n\r\n  //current date\r\n  let today = new Date();\r\n\r\n  //current month\r\n  let mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\r\n  // current year\r\n  let yyyy = today.getFullYear();\r\n\r\n  // this shows last 10th number of  registered users\r\n  // means current day users\r\n  // we use filter method because we want all users at a specific date\r\n  // we user filter because every data has a array of object\r\n  today.setDate(String(today.getDate()).padStart(2, \"0\"));\r\n  const today_users = users.filter((user) => {\r\n    const t = user.registerDate;\r\n    // in userdate letiable we can get only date so that I use substr(8,2)\r\n    // if the date is 2021-14-10 then we get only 14\r\n\r\n    const userdate = t.substr(8, 2); //14\r\n    return userdate === `${String(today.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n\r\n  // this shows last 9th number of  registered users\r\n\r\n  let last1Day = new Date();\r\n  last1Day.setDate(String(last1Day.getDate() - 1).padStart(2, \"0\"));\r\n  const last_1day_users = users.filter((user) => {\r\n    const t = user.registerDate;\r\n    const userdate = t.substr(8, 2);\r\n    // here we deduct dd-1 because we want last day of the current day\r\n    return userdate === `${String(last1Day.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n\r\n  // this shows last 8th number of  registered users\r\n\r\n  let last2Days = new Date();\r\n  last2Days.setDate(String(last2Days.getDate() - 2).padStart(2, \"0\"));\r\n  const last_2days_users = users.filter((user) => {\r\n    const t = user.registerDate;\r\n    const userdate = t.substr(8, 2);\r\n    // here we deduct dd-2 because we want 2nd last day of the current day\r\n\r\n    return userdate === `${String(last2Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n\r\n  // this shows last 7th number of  registered users\r\n  let last3Days = new Date();\r\n  last3Days.setDate(String(last3Days.getDate() - 3).padStart(2, \"0\"));\r\n  const last_3days_users = users.filter((user) => {\r\n    const t = user.registerDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last3Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n\r\n  // this shows last 6th number of  registered users\r\n\r\n  let last4Days = new Date();\r\n  last4Days.setDate(String(last4Days.getDate() - 4).padStart(2, \"0\"));\r\n  const last_4days_users = users.filter((user) => {\r\n    const t = user.registerDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last4Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n\r\n  // this shows last 5th number of  registered users\r\n\r\n  let last5Days = new Date();\r\n  last5Days.setDate(String(last5Days.getDate() - 5).padStart(2, \"0\"));\r\n  const last_5days_users = users.filter((user) => {\r\n    const t = user.registerDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last5Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n  // this shows last 4th number of  registered users\r\n\r\n  let last6Days = new Date();\r\n  last6Days.setDate(String(last6Days.getDate() - 6).padStart(2, \"0\"));\r\n  const last_6days_users = users.filter((user) => {\r\n    const t = user.registerDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last6Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n\r\n  // this shows last 4th number of  registered users\r\n\r\n  let last7Days = new Date();\r\n  last7Days.setDate(String(last7Days.getDate() - 7).padStart(2, \"0\"));\r\n  const last_7days_users = users.filter((user) => {\r\n    const t = user.registerDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last7Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n  // this shows last 4th number of  registered users\r\n\r\n  let last8Days = new Date();\r\n  last8Days.setDate(String(last8Days.getDate() - 8).padStart(2, \"0\"));\r\n  const last_8days_users = users.filter((user) => {\r\n    const t = user.registerDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last8Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n  let last9Days = new Date();\r\n  last9Days.setDate(String(last9Days.getDate() - 9).padStart(2, \"0\"));\r\n  const last_9days_users = users.filter((user) => {\r\n    const t = user.registerDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last9Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n  // all users who registered last 10 days\r\n\r\n  const AllUsers = [\r\n    {\r\n      //this is date which shows on x-axis of the graph\r\n      year: `${String(today.getDate()).padStart(2, \"0\")}`,\r\n      // here we get all users length who registered on this date which shows on y-axis line\r\n      users: today_users.length,\r\n    },\r\n    {\r\n      year: `${String(last1Day.getDate()).padStart(2, \"0\")}`,\r\n      users: last_1day_users.length,\r\n    },\r\n    {\r\n      year: `${String(last2Days.getDate()).padStart(2, \"0\")}`,\r\n\r\n      users: last_2days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last3Days.getDate()).padStart(2, \"0\")}`,\r\n      users: last_3days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last4Days.getDate()).padStart(2, \"0\")}`,\r\n      users: last_4days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last5Days.getDate()).padStart(2, \"0\")}`,\r\n      users: last_5days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last6Days.getDate()).padStart(2, \"0\")}`,\r\n      users: last_6days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last7Days.getDate()).padStart(2, \"0\")}`,\r\n      users: last_7days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last8Days.getDate()).padStart(2, \"0\")}`,\r\n      users: last_8days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last9Days.getDate()).padStart(2, \"0\")}`,\r\n      users: last_9days_users.length,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <Chart data={AllUsers}>\r\n        <ArgumentAxis />\r\n        <ValueAxis max={7} />\r\n\r\n        <BarSeries valueField=\"users\" argumentField=\"year\" />\r\n        <Title\r\n          text={`Last 10 days User Registeration count of ${mm + \"/\" + yyyy}`}\r\n        />\r\n        <Animation />\r\n      </Chart>\r\n      <div>\r\n        <h3 style={{ textAlign: \"center\" }}>Total number of Users</h3>\r\n        <p>{users.length}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersCountChart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Chart,\r\n  BarSeries,\r\n  Title,\r\n  ArgumentAxis,\r\n  ValueAxis,\r\n} from \"@devexpress/dx-react-chart-bootstrap4\";\r\nimport \"@devexpress/dx-react-chart-bootstrap4/dist/dx-react-chart-bootstrap4.css\";\r\nimport { Animation } from \"@devexpress/dx-react-chart\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nconst PostsCounterChart = () => {\r\n  // Here we fetch all posts in posts table\r\n  const [posts, setAllUsers] = useState([]);\r\n  const { sendRequest } = useHttpClient();\r\n\r\n  // when call this component this useEffect call and fetch all posts\r\n  // from database and setAllPosts in posts state.\r\n  useEffect(() => {\r\n    async function fetchAllUsers() {\r\n      try {\r\n        const res = await sendRequest(`/api/posts/`);\r\n        setAllUsers(res.posts);\r\n      } catch (error) {}\r\n    }\r\n    fetchAllUsers();\r\n  }, [sendRequest]);\r\n\r\n  //current date\r\n  let today = new Date();\r\n\r\n  //current month\r\n  let mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\r\n  // current year\r\n  let yyyy = today.getFullYear();\r\n\r\n  // this shows last 10th number of  registered posts\r\n  // we use filter method because we want all posts at a specific date\r\n  // we user filter because every data has a array of object\r\n  today.setDate(String(today.getDate()).padStart(2, \"0\"));\r\n  const today_users = posts.filter((user) => {\r\n    const t = user.publishDate;\r\n    // in userdate letiable we can get only date so that I use substr(8,2)\r\n    // if the date is 2021-14-10 then we get only 14\r\n\r\n    const userdate = t.substr(8, 2); //14\r\n    return userdate === `${String(today.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n\r\n  // this shows last 1st day number of  registered posts\r\n\r\n  let last1Day = new Date();\r\n  last1Day.setDate(String(last1Day.getDate() - 1).padStart(2, \"0\"));\r\n  const last_1day_users = posts.filter((user) => {\r\n    const t = user.publishDate;\r\n    const userdate = t.substr(8, 2);\r\n    // here we deduct dd-1 because we want last day of the current day\r\n    return userdate === `${String(last1Day.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n\r\n  // this shows last 2nd day number of  registered posts\r\n\r\n  let last2Days = new Date();\r\n  last2Days.setDate(String(last2Days.getDate() - 2).padStart(2, \"0\"));\r\n  const last_2days_users = posts.filter((user) => {\r\n    const t = user.publishDate;\r\n    const userdate = t.substr(8, 2);\r\n    // here we deduct dd-2 because we want 2nd last day of the current day\r\n\r\n    return userdate === `${String(last2Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n\r\n  // this shows last 3rd day number of  registered posts\r\n  let last3Days = new Date();\r\n  last3Days.setDate(String(last3Days.getDate() - 3).padStart(2, \"0\"));\r\n  const last_3days_users = posts.filter((user) => {\r\n    const t = user.publishDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last3Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n\r\n  // this shows last 4th day number of  registered posts\r\n\r\n  let last4Days = new Date();\r\n  last4Days.setDate(String(last4Days.getDate() - 4).padStart(2, \"0\"));\r\n  const last_4days_users = posts.filter((user) => {\r\n    const t = user.publishDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last4Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n\r\n  // this shows last 5th day number of  registered posts\r\n\r\n  let last5Days = new Date();\r\n  last5Days.setDate(String(last5Days.getDate() - 5).padStart(2, \"0\"));\r\n  const last_5days_users = posts.filter((user) => {\r\n    const t = user.publishDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last5Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n  // this shows last 6th day number of  registered posts\r\n\r\n  let last6Days = new Date();\r\n  last6Days.setDate(String(last6Days.getDate() - 6).padStart(2, \"0\"));\r\n  const last_6days_users = posts.filter((user) => {\r\n    const t = user.publishDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last6Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n\r\n  // this shows last 7th day number of  registered posts\r\n\r\n  let last7Days = new Date();\r\n  last7Days.setDate(String(last7Days.getDate() - 7).padStart(2, \"0\"));\r\n  const last_7days_users = posts.filter((user) => {\r\n    const t = user.publishDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last7Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n  // this shows last 8th day number of  registered posts\r\n\r\n  let last8Days = new Date();\r\n  last8Days.setDate(String(last8Days.getDate() - 8).padStart(2, \"0\"));\r\n  const last_8days_users = posts.filter((user) => {\r\n    const t = user.publishDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last8Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n\r\n  // this shows last 9th day number of  registered posts\r\n\r\n  let last9Days = new Date();\r\n  last9Days.setDate(String(last9Days.getDate() - 9).padStart(2, \"0\"));\r\n  const last_9days_users = posts.filter((user) => {\r\n    const t = user.publishDate;\r\n    const userdate = t.substr(8, 2);\r\n    return userdate === `${String(last9Days.getDate()).padStart(2, \"0\")}`;\r\n  });\r\n  // all posts who registered last 10 days\r\n\r\n  const AllUsers = [\r\n    {\r\n      //this is date which shows on x-axis of the graph\r\n      year: `${String(today.getDate()).padStart(2, \"0\")}`,\r\n      // here we get all posts length who registered on this date which shows on y-axis line\r\n      posts: today_users.length,\r\n    },\r\n    {\r\n      year: `${String(last1Day.getDate()).padStart(2, \"0\")}`,\r\n      posts: last_1day_users.length,\r\n    },\r\n    {\r\n      year: `${String(last2Days.getDate()).padStart(2, \"0\")}`,\r\n\r\n      posts: last_2days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last3Days.getDate()).padStart(2, \"0\")}`,\r\n      posts: last_3days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last4Days.getDate()).padStart(2, \"0\")}`,\r\n      posts: last_4days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last5Days.getDate()).padStart(2, \"0\")}`,\r\n      posts: last_5days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last6Days.getDate()).padStart(2, \"0\")}`,\r\n      posts: last_6days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last7Days.getDate()).padStart(2, \"0\")}`,\r\n      posts: last_7days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last8Days.getDate()).padStart(2, \"0\")}`,\r\n      posts: last_8days_users.length,\r\n    },\r\n    {\r\n      year: `${String(last9Days.getDate()).padStart(2, \"0\")}`,\r\n      posts: last_9days_users.length,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <Chart data={AllUsers}>\r\n        <ArgumentAxis />\r\n        <ValueAxis max={7} />\r\n\r\n        <BarSeries valueField=\"posts\" argumentField=\"year\" />\r\n        <Title\r\n          text={`Last 10 days Published Journals count of ${mm + \"/\" + yyyy}`}\r\n        />\r\n        <Animation />\r\n      </Chart>\r\n      <div>\r\n        <h3 style={{ textAlign: \"center\" }}>Total number of Journals</h3>\r\n        <p>{posts.length}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostsCounterChart;\r\n","import React, { useContext } from \"react\";\r\nimport \"./SingleStatus.css\";\r\nimport { AuthContext } from \"../../shared/context/auth-form-context\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nconst SingleStatus = ({ user }) => {\r\n  const { sendRequest } = useHttpClient();\r\n  const auth = useContext(AuthContext);\r\n  // when user click active btn then this function call and replace the user status with 'active'\r\n  const ActiveHandle = async (userid) => {\r\n    try {\r\n      await sendRequest(\r\n        `/api/users/${userid}`,\r\n        \"PATCH\",\r\n        JSON.stringify({\r\n          name: user.name,\r\n          email: user.email,\r\n          password: user.password,\r\n          image: \"\",\r\n          registerDate: user.registerDate,\r\n          role: user.role,\r\n          status: \"active\",\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n      localStorage.setItem(\"status\", \"active\");\r\n\r\n      window.location.href(\"/admin\");\r\n    } catch (error) {}\r\n  };\r\n\r\n  // when user click deactivate btn then this function call and replace the user status with 'deactivate'\r\n\r\n  const DeActiveHandle = async (userid) => {\r\n    try {\r\n      await sendRequest(\r\n        `/api/users/${userid}`,\r\n        \"PATCH\",\r\n        JSON.stringify({\r\n          name: user.name,\r\n          email: user.email,\r\n          password: user.password,\r\n          image: \"\",\r\n          registerDate: user.registerDate,\r\n          role: user.role,\r\n          status: \"deactivated\",\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n      localStorage.setItem(\"status\", \"deactivate\");\r\n      window.location.href(\"/admin\");\r\n    } catch (error) {}\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h4>\r\n        Right now the status is:\r\n        <p style={{ border: \"1px solid gray\", padding: \"5px\", margin: \"5px\" }}>\r\n          {user.status}\r\n        </p>\r\n      </h4>\r\n      <button className=\"active-btn\" onClick={() => ActiveHandle(user.id)}>\r\n        Active\r\n      </button>\r\n      <button className=\"deactive-btn\" onClick={() => DeActiveHandle(user.id)}>\r\n        DEACTIVE\r\n      </button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SingleStatus;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport \"./UserActive.css\";\r\nimport { AuthContext } from \"../../shared/context/auth-form-context\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport Modal from \"../../shared/components/UIElements/Modal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport SingleStatus from \"./SingleStatus\";\r\n\r\nconst UserActive = () => {\r\n  const [allusers, setAllUsers] = useState([]);\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n  const [singleuser, setUser] = useState({});\r\n  const { sendRequest, isLoading } = useHttpClient();\r\n  const auth = useContext(AuthContext);\r\n  // when you click the chnage status btn then pop up shows with that user info which on you clicked\r\n  const showStatusModal = async (userid) => {\r\n    try {\r\n      const res = await sendRequest(\r\n        `/api/users/${userid}`\r\n      );\r\n      setUser(res.username[0]);\r\n    } catch (error) {}\r\n    setShowConfirmModal(true);\r\n  };\r\n\r\n  const cancelDeleteHandler = () => {\r\n    setShowConfirmModal(false);\r\n  };\r\n\r\n  // this api fetch all users from database and set it to users letiable\r\n\r\n  useEffect(() => {\r\n    async function fetchAllusers() {\r\n      try {\r\n        const res = await sendRequest(`/api/users/`);\r\n        setAllUsers(res.users);\r\n      } catch (error) {}\r\n    }\r\n    fetchAllusers();\r\n  }, [sendRequest]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2 style={{ textAlign: \"center\" }}>ACTIVE AND DEACTIVE TO USER</h2>\r\n\r\n      <div style={{ overflow: \"auto\", height: \"400px\" }}>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">UserName</th>\r\n              <th scope=\"col\">UserType</th>\r\n              <th scope=\"col\">UserStatus</th>\r\n              <th scope=\"col\">UserStatus</th>\r\n              <th scope=\"col\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {/* use map function to show all users in table */}\r\n            {allusers.map((user) => (\r\n              <tr key={user.id}>\r\n                <td data-label=\"Name\">{user.name}</td>\r\n                <td data-label=\"Role\">{user.role}</td>\r\n                <td data-label=\"Status\">{user.status}</td>\r\n                <td data-label=\"Email\">{user.email}</td>\r\n\r\n                <td data-label=\"Action\">\r\n                  <div\r\n                    style={{\r\n                      //   display: \"flex\",\r\n                      //   justifyContent: \"center\",\r\n                      //   alignItems: \"center\",\r\n                      //   width: \"100px\",\r\n                      marginLeft: \"10px\",\r\n                    }}\r\n                  >\r\n                    <Modal\r\n                      show={showConfirmModal}\r\n                      onCancel={cancelDeleteHandler}\r\n                      header=\"User Status\"\r\n                      footerClass=\"post-item__modal-actions\"\r\n                      footer={\r\n                        <React.Fragment>\r\n                          <button\r\n                            className=\"form-btn\"\r\n                            style={{ marginTop: \"0px\" }}\r\n                            onClick={cancelDeleteHandler}\r\n                          >\r\n                            CANCEL\r\n                          </button>\r\n                        </React.Fragment>\r\n                      }\r\n                    >\r\n                      {/* <ErrorModal error={error} onClear={clearError} /> */}\r\n                      {auth.isSignedIn ? (\r\n                        <form>\r\n                          {isLoading && <LoadingSpinner asOverlay />}\r\n                          <label htmlFor=\"comment\">Change User status:</label>\r\n                          <SingleStatus user={singleuser} />\r\n                        </form>\r\n                      ) : null}\r\n                    </Modal>\r\n                    <button\r\n                      className=\"status-btn\"\r\n                      onClick={() => showStatusModal(user.id)}\r\n                    >\r\n                      Change Status\r\n                    </button>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserActive;\r\n","import React, { useState } from \"react\";\r\nimport \"./Admin.css\";\r\nimport UsersCountChart from \"../components/UsersCountChart\";\r\nimport PostsCountChart from \"../components/PostsCountChart\";\r\nimport UserActive from \"../components/UserActive\";\r\n\r\nconst Admin = () => {\r\n  // when the toogle value is true this display the page of user status otherwise it shows the graph page\r\n  // by default you see user status page\r\n  // page and name of page both change when you will click\r\n  const [toggle, setToggle] = useState(true);\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"journal-form\">\r\n        {!toggle ? (\r\n          <button\r\n            className=\"active-btn\"\r\n            style={{ marginBottom: \"10px\" }}\r\n            onClick={() => setToggle(true)}\r\n          >\r\n            Check the Status\r\n          </button>\r\n        ) : (\r\n          <button\r\n            className=\"deactive-btn\"\r\n            style={{ marginBottom: \"10px\" }}\r\n            onClick={() => setToggle(false)}\r\n          >\r\n            Check the Graph\r\n          </button>\r\n        )}\r\n\r\n        {!toggle && (\r\n          <>\r\n            <UsersCountChart />\r\n            <PostsCountChart />\r\n          </>\r\n        )}\r\n        {toggle && <UserActive />}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-form-context\";\r\nimport Modal from \"../../shared/components/UIElements/Modal\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport axios from \"axios\";\r\nimport \"./Profile.css\";\r\nconst Profile = () => {\r\n  const [user, setUser] = useState(\"\");\r\n  const [o_password, setOldPassword] = useState(\"\");\r\n  const [n_password, setNewPassword] = useState(\"\");\r\n  const [c_password, setConfirmPassword] = useState(\"\");\r\n  const [Error, setError] = useState(\"\");\r\n  const [ErrorPassword, setErrorPassword] = useState(\"\");\r\n\r\n  const [image, setImage] = useState(null);\r\n\r\n  //   const [user, setImages] = useState(\"\");\r\n\r\n  const [showConfirmPasswordModal, setShowImageConfirmModal] = useState(false);\r\n  const [showConfirmImageModal, setShowPasswordConfirmModal] = useState(false);\r\n\r\n  const auth = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const { sendRequest, isLoading } = useHttpClient();\r\n\r\n  const changeUserImage = async () => {\r\n    try {\r\n      if (image === null) {\r\n        return;\r\n      }\r\n      const formData = new FormData();\r\n      formData.append(\"image\", image);\r\n      await axios\r\n        .patch(`/api/users/image/${auth.userId}`, formData)\r\n        .then((res) => console.log(res, \"res\"))\r\n        .catch((err) => console.log(err));\r\n      window.location.reload();\r\n      history.push(\"/profile\");\r\n    } catch (error) {}\r\n  };\r\n\r\n  // this function is used to change password\r\n\r\n  const ConfirmPassword = async () => {\r\n    try {\r\n      const respnseData = await sendRequest(\r\n        `/api/users/verify/${auth.userId}`,\r\n        \"POST\",\r\n        JSON.stringify({\r\n          old_password: o_password,\r\n        }),\r\n        { \"Content-Type\": \"application/json\" }\r\n      );\r\n      return respnseData.verifyPassword;\r\n    } catch (error) {}\r\n  };\r\n  const changeUserPassword = async () => {\r\n    try {\r\n      const check = await ConfirmPassword();\r\n      if (check) {\r\n        setError(\"\");\r\n        if (n_password.length === 0) {\r\n          setErrorPassword(\"All fields are required\");\r\n          return;\r\n        }\r\n        if (c_password.length === 0) {\r\n          setErrorPassword(\"All fields are required\");\r\n          return;\r\n        }\r\n        if (n_password.length < 8) {\r\n          setErrorPassword(\"Password must be contain minimum 8 characters\");\r\n          return;\r\n        }\r\n        if (n_password !== c_password) {\r\n          setErrorPassword(\"Password did not match\");\r\n          return;\r\n        }\r\n        await sendRequest(\r\n          `/api/users/password/${auth.userId}`,\r\n          \"POST\",\r\n          JSON.stringify({\r\n            password: n_password,\r\n          }),\r\n          { \"Content-Type\": \"application/json\" }\r\n        );\r\n        window.location.reload();\r\n        history.push(\"/profile\");\r\n      } else {\r\n        setError(\"Old Password is Incorrect\");\r\n        setErrorPassword(\"\");\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  // this useEffect is used to fetch user by id\r\n  useEffect(() => {\r\n    async function fetchUser() {\r\n      try {\r\n        const res = await sendRequest(`/api/users/${auth.userId}`);\r\n        setUser(res.username[0]);\r\n      } catch (error) {}\r\n    }\r\n\r\n    fetchUser();\r\n  }, [auth.userId, sendRequest]);\r\n\r\n  const cancelDeleteHandler = () => {\r\n    setShowPasswordConfirmModal(false);\r\n    setShowImageConfirmModal(false);\r\n  };\r\n\r\n  const setShowPasswordModal = () => {\r\n    setShowPasswordConfirmModal(true);\r\n  };\r\n  const setShowImageModal = () => {\r\n    setShowImageConfirmModal(true);\r\n  };\r\n\r\n  const uploadImage = (event) => {\r\n    setImage(event.target.files[0]);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"journal-form\">\r\n        <Modal\r\n          show={showConfirmImageModal}\r\n          onCancel={cancelDeleteHandler}\r\n          header=\"Change User Profile\"\r\n          footerClass=\"post-item__modal-actions\"\r\n          footer={\r\n            <React.Fragment>\r\n              <button\r\n                className=\"form-btn\"\r\n                style={{ marginTop: \"0px\" }}\r\n                onClick={cancelDeleteHandler}\r\n              >\r\n                CANCEL\r\n              </button>\r\n            </React.Fragment>\r\n          }\r\n        >\r\n          {auth.isSignedIn ? (\r\n            <div className=\"journal-form\">\r\n              {isLoading && <LoadingSpinner asOverlay />}\r\n              <label htmlFor=\"image\">User Image:</label>\r\n              <input\r\n                type=\"file\"\r\n                name=\"image\"\r\n                id=\"image\"\r\n                accept=\".jpg,.png,.jpeg\"\r\n                onChange={(e) => uploadImage(e)}\r\n              />\r\n              <button className=\"form-btn\" onClick={() => changeUserImage()}>\r\n                Change Image\r\n              </button>\r\n            </div>\r\n          ) : null}\r\n        </Modal>\r\n        <Modal\r\n          show={showConfirmPasswordModal}\r\n          onCancel={cancelDeleteHandler}\r\n          header=\"Change User Profile\"\r\n          footerClass=\"post-item__modal-actions\"\r\n          footer={\r\n            <React.Fragment>\r\n              <button\r\n                className=\"form-btn\"\r\n                style={{ marginTop: \"0px\" }}\r\n                onClick={cancelDeleteHandler}\r\n              >\r\n                CANCEL\r\n              </button>\r\n            </React.Fragment>\r\n          }\r\n        >\r\n          {auth.isSignedIn ? (\r\n            <div className=\"journal-form\">\r\n              {isLoading && <LoadingSpinner asOverlay />}\r\n              <label htmlFor=\"password\">Old Password:</label>\r\n              <input\r\n                className=\"form-control\"\r\n                type=\"password\"\r\n                id=\"oldpassword\"\r\n                name=\"oldpassword\"\r\n                autoComplete=\"off\"\r\n                value={o_password}\r\n                onChange={(e) => setOldPassword(e.target.value)}\r\n              />\r\n              <p style={{ color: \"red\", fontSize: \"15px\" }}>{Error}</p>\r\n              <label htmlFor=\"password\">New Password:</label>\r\n              <input\r\n                className=\"form-control\"\r\n                type=\"password\"\r\n                id=\"n_password\"\r\n                name=\"n_password\"\r\n                autoComplete=\"off\"\r\n                value={n_password}\r\n                onChange={(e) => setNewPassword(e.target.value)}\r\n              />\r\n              <label htmlFor=\"password\">Confirm Password:</label>\r\n              <input\r\n                className=\"form-control\"\r\n                type=\"password\"\r\n                id=\"c_password\"\r\n                name=\"c_password\"\r\n                autoComplete=\"off\"\r\n                value={c_password}\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n              />\r\n              <p style={{ color: \"red\", fontSize: \"15px\" }}>{ErrorPassword}</p>\r\n              <button className=\"form-btn\" onClick={() => changeUserPassword()}>\r\n                Change Password\r\n              </button>\r\n            </div>\r\n          ) : null}\r\n        </Modal>\r\n        <div className=\"pro-card\">\r\n          {user === undefined ? null : (\r\n            <img className=\"pro-image\" src={`${user.imageUrl}`} alt=\"profile\" />\r\n          )}\r\n\r\n          <div className=\"profile-content\">\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">Name</th>\r\n                  <th scope=\"col\">Register Date</th>\r\n                  <th scope=\"col\">Email</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr key={user.id}>\r\n                  <td data-label=\"Name\">{user.name}</td>\r\n                  <td data-label=\"Role\">\r\n                    {moment(user.registerDate).format(\"YYYY-MM-DD\")}\r\n                  </td>\r\n\r\n                  <td data-label=\"Email\">{user.email}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div className=\"action-buttons\">\r\n            <button className=\"button-17\" onClick={() => setShowImageModal()}>\r\n              Change Password\r\n            </button>\r\n            <button\r\n              className=\"button-17\"\r\n              onClick={() => setShowPasswordModal()}\r\n            >\r\n              Change Image\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport UserPostList from \"../../posts/components/UserPostList\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport { AuthContext } from \"../../shared/context/auth-form-context\";\r\nconst UserPosts = () => {\r\n  const [loadedPosts, setLoadedPosts] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const auth = useContext(AuthContext);\r\n\r\n  // this check which posts are added to wishlist then shows it on screen\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `/api/favourites/${auth.userId}`,\r\n          \"GET\"\r\n        );\r\n        setLoadedPosts(responseData.favourites);\r\n      } catch (error) {}\r\n    };\r\n    fetchPosts();\r\n  }, [sendRequest, auth.userId]);\r\n\r\n  // Switch to the add new journal page\r\n  const history = useHistory();\r\n  const addNewJounralHandler = () => {\r\n    history.push(\"/journals/new\");\r\n  };\r\n\r\n  const postDeletedHandler = (deletedPostId) => {\r\n    setLoadedPosts((prevPosts) =>\r\n      prevPosts.filter((post) => post.id !== deletedPostId)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && !loadedPosts && (\r\n        <div className=\"center\">\r\n          <Card>\r\n            <h2>No Journals To Favourites</h2>\r\n            <button\r\n              className=\"form-btn\"\r\n              type=\"submit\"\r\n              onClick={addNewJounralHandler}\r\n            >\r\n              Add New Journal\r\n            </button>\r\n          </Card>\r\n        </div>\r\n      )}\r\n      {/* Here I passed some props because I want different things in UserPostList component */}\r\n      {/* because we need different things in favourites section */}\r\n      {!isLoading && loadedPosts && (\r\n        <UserPostList\r\n          items={loadedPosts}\r\n          onDeletePost={postDeletedHandler}\r\n          display=\"none\"\r\n          delete={true}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserPosts;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}